<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="member">
	<select id="loginMember" parameterType="String" resultType="com.sp.tp.member.Member">
		SELECT membership, m.userId, userName, pwd, reg_date, modify_date, point
		FROM member m
		JOIN member1 m1 ON m1.userId = m.userId
		WHERE m.userId = #{userId} AND enable != 0
	</select>
	
    <select id="memberSeq" resultType="Long">
       SELECT member_seq.NEXTVAL FROM dual 
    </select>

    <insert id="insertMember" parameterType="String">
		INSERT INTO member(userId, membership) VALUES (#{userId}, 1) 
    </insert>

	
    <update id="insertMember12" parameterType="com.sp.tp.member.Member">
		INSERT ALL
		INTO member1(userId, userName, pwd, enable, reg_date, modify_date, point)
		VALUES (#{userId}, #{userName}, #{pwd}, 1, SYSDATE, SYSDATE, 0)
		INTO member2(userId, birth, email, tel, zip, addr1, addr2, gender, genre)
		VALUES (#{userId}, #{birth}, #{email}, #{tel}, 
			#{zip}, #{addr1}, 
			#{addr2}, #{gender}, #{genre})
		SELECT * FROM dual     
    </update>
	
	<select id="readMember" parameterType="String" resultType="com.sp.tp.member.Member">
		SELECT m.userId, membership, userName, pwd, enable,
			reg_date, modify_date,
			TO_CHAR(birth, 'YYYY-MM-DD') birth, email, tel, 
			zip, addr1, addr2, point, gender, genre, introducer
		FROM member m 
		JOIN member1 m1 ON m.userId = m1.userId 
		LEFT OUTER JOIN member2 m2 ON m1.userId = m2.userId
		WHERE m1.userId = #{userId}
	</select>
	
    <!-- 회원정보 수정  --> 
    <update id="updateMembership" parameterType="map">
		UPDATE member SET membership = #{membership}
		WHERE userId=#{userId}
    </update>

    <update id="updateMemberEnabled" parameterType="map">
		UPDATE member1 SET enable=#{enable} WHERE userId=#{userId}
    </update>
    
    <update id="updateMember1" parameterType="com.sp.tp.member.Member">
		UPDATE member1 SET pwd=#{pwd}, modify_date=SYSDATE
		WHERE userId=#{userId}
    </update>
	
    <update id="updateMember2" parameterType="com.sp.tp.member.Member">
		UPDATE member2 SET email=#{email, jdbcType=VARCHAR}, 
			tel=#{tel, jdbcType=VARCHAR}, birth=#{birth, jdbcType=VARCHAR},
			zip=#{zip, jdbcType=VARCHAR},
			addr1=#{addr1, jdbcType=VARCHAR}, addr2=#{addr2, jdbcType=VARCHAR},
			gender=#{gender}, genre=#{genre}
		WHERE userId=#{userId}
    </update>

    <!-- member 테이블 정보 삭제  -->    
    <delete id="deleteMember1" parameterType="String">
		DELETE FROM member1 WHERE userId=#{userId}
    </delete>
    
    <delete id="deleteMember2" parameterType="String">
		DELETE FROM member2 WHERE userId=#{userId}
    </delete>
    
    
    <!-- 마이페이지 관련 -->
    <select id="listMyCoupon" parameterType="String" resultType="com.sp.tp.member.myCoupon">
    	SELECT c.couponNum, coupon, TO_CHAR(startDate, 'YYYY-MM-DD') startDate, TO_CHAR(endDate, 'YYYY-MM-DD') endDate, userId, useCoupon,
	    CASE WHEN useCoupon=1 THEN '사용완료'
	         WHEN endDate &lt; SYSDATE THEN '기간만료'
	         ELSE '미사용'
		     END couponState
		FROM coupon c
		JOIN myCoupon mc
		ON c.couponNum = mc.couponNum
		WHERE userId = #{userId}
    </select>
    
    <select id="listMyChoice" parameterType="String" resultType="com.sp.tp.member.myChoice">
    	SELECT p.perfNum, subject, rating, time, saveFilename, userId, category
		FROM performance p
		JOIN choice c
		ON c.perfNum = p.perfNum
		JOIN poster ps
		ON p.perfnum = ps.perfnum
		JOIN genre g
        ON g.gnum = p.gmnum
        JOIN category ct
        ON ct.cnum = g.cnum
		WHERE userId = #{userId}
		AND ps.poster_main = 1
    </select>
    
    <select id="userChoiced" parameterType="map" resultType="com.sp.tp.member.myChoice">
    	SELECT userId, perfNum FROM choice WHERE userId=#{userId} AND perfNum=#{perfNum}
    </select>
    
    <insert id="insertChoice" parameterType="map">
    	INSERT INTO choice (userId, perfNum) VALUES(#{userId}, #{perfNum})
    </insert>
    
    <delete id="deleteChoice" parameterType="map">
    	DELETE FROM choice WHERE userId=#{userId} AND perfNum=#{perfNum}
    </delete>
    
    <select id="listMyBook" parameterType="String" resultType="com.sp.tp.member.MyBookList">
    	SELECT TO_CHAR(bookDate, 'YYYY-MM-DD') bookDate, b.bNum, subject, pt.perf_date, amount, state, TO_CHAR((TO_DATE(pt.perf_date, 'YYYY-MM-DD') - 3), 'YYYY-MM-DD') cancel_date, LISTAGG(seat_num,',') WITHIN GROUP(ORDER BY seat_num) AS seat_num, po.saveFilename, pt.perfNum2 perfNum, category
		FROM book b
		JOIN book2 bo ON bo.bNum = b.bNum
		JOIN performanceTime pt ON pt.ptNum = bo.ptNum
		JOIN schedule s ON s.perf_date = pt.perf_date
		JOIN performance p ON p.perfNum = s.perfNum2
		JOIN poster po ON p.perfNum = po.perfNum
        JOIN genre g ON g.gNum = p.gmNum
        JOIN category c ON g.cNum = c.cNum
		WHERE userId = #{userId} AND po.poster_main = 1
		GROUP BY bookDate, b.bNum, subject, pt.perf_date, amount, state, po.saveFilename, pt.perfNum2, category
    </select>
    
    <select id="openModal" parameterType="map" resultType="com.sp.tp.member.MyBookList">
    	SELECT bookDate, b.bNum, subject, performanceTime, pt.perf_date, amount, state, TO_CHAR((TO_DATE(pt.perf_date, 'YYYY-MM-DD') - 3), 'YYYY-MM-DD') cancel_date, LISTAGG(seat_num,',') WITHIN GROUP(ORDER BY seat_num) AS seat_num,  po.saveFilename, t.name, t.location, h.hallName, h.addr
		FROM book b
		JOIN book2 bo ON bo.bNum = b.bNum
		JOIN performanceTime pt ON pt.ptNum = bo.ptNum
		JOIN schedule s ON s.perf_date = pt.perf_date
		JOIN performance p ON p.perfNum = s.perfNum2
		JOIN poster po ON p.perfNum = po.perfNum
        JOIN hall h ON h.hNum = s.hNum
        JOIN theater t ON t.tNum = pt.tNum
		WHERE userId = #{userId} AND po.poster_main = 1 AND b.bNum = #{bNum}
		GROUP BY bookDate, b.bNum, subject, pt.perf_date, amount, state, po.saveFilename, t.name, t.location, h.hallName, h.addr, performanceTime
    </select>
</mapper>